---
import BaseLayout from '../../layouts/BaseLayout.astro';
import cars from '../../data/car_data.json';
import { getSupportTypeColor } from '../../utils/supportType';
import InfoCard from '../../components/InfoCard';
import MasterToggle from '../../components/MasterToggle';

// Generate all possible car paths at build time
export async function getStaticPaths() {
	return cars.map(car => ({
		params: { car: `${car.make}-${car.model}`.toLowerCase() },
		props: { carData: car },
	}));
}

const { carData } = Astro.props;
---

<BaseLayout title={`${carData.make} ${carData.model} - opendbc`}>
	<main class="min-h-screen bg-[#E8E8E8]">
		<div class="max-w-7xl mx-auto pl-5">
				<!-- Breadcrumb -->
				<nav class="flex items-center space-x-2 text-md pb-4">
						<a href="/" class="hover:underline">Home</a>
						<span>&gt;</span>
						<span>{carData.make} {carData.model} {carData.years}</span>
				</nav>
		</div>

		<div class="max-w-7xl mx-auto px-5">
			<div class="flex flex-col lg:flex-row gap-8">
				<!-- Left Sidebar -->
				<div class="lg:w-80 flex-shrink-0">
					<!-- Sidebar Header -->
					<div class="mb-6">
						<div class="bg-black text-white flex items-stretch">
							<h1 class="text-xl font-bold flex-grow py-3 pl-4">{carData.make}</h1>
							<MasterToggle client:load />
						</div>
						<div class="bg-white">
							<div class="py-3 pl-4">
								<p class="font-medium">{carData.years} {carData.make} {carData.model}</p>
							</div>
						</div>
					</div>

					<!-- User Video -->
					{carData.video && (
						<InfoCard label="User Video" defaultExpanded={false} client:load>
							<div class="w-full overflow-hidden aspect-video">
								<iframe
									src={(() => {
										const videoUrl = carData.video;
										let embedUrl = '';
										
										if (videoUrl.includes('youtu.be/')) {
											// Handle youtu.be format: https://youtu.be/VIDEO_ID or https://youtu.be/VIDEO_ID?t=26
											const videoId = videoUrl.split('youtu.be/')[1].split('?')[0];
											const timestamp = videoUrl.includes('?t=') ? `&start=${videoUrl.split('?t=')[1]}` : '';
											embedUrl = `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1&showinfo=0${timestamp}`;
										} else if (videoUrl.includes('youtube.com/watch?v=')) {
											// Handle youtube.com format: https://www.youtube.com/watch?v=VIDEO_ID
											const videoId = videoUrl.split('v=')[1].split('&')[0];
											embedUrl = `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1&showinfo=0`;
										} else {
											// Fallback to original URL
											embedUrl = videoUrl;
										}
										
										return embedUrl;
									})()}
									title={`${carData.make} ${carData.model} User Video`}
									allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
									allowfullscreen
									class="w-full h-full border-0"
								></iframe>
							</div>
						</InfoCard>
					)}

					<!-- Key Specs -->
					<InfoCard label="Key Specs" client:load>
						<div class="divide-y divide-gray-200">
							<div class="p-4">
								<p class="text-sm"><strong>Support Type:</strong></p>
								<a 
									href={`/support-types`} 
									class={`text-l mt-1 px-4 py-2 inline-block ${getSupportTypeColor(carData.support_type)} hover:opacity-90 transition-opacity cursor-pointer`}
								>
									{carData.support_type}
								</a>
							</div>
							<div class="p-4">
								<p class="text-sm"><strong>ADAS Package:</strong></p>
								<p class="text-l mt-1">{carData.package}</p>
							</div>
							<div class="p-4">
								<p class="text-sm"><strong>Fingerprint:</strong></p>
								<p class="text-l mt-1">{carData.car_fingerprint}</p>
							</div>
							{carData.harness && (
								<div class="p-4">
									<p class="text-sm"><strong>Harness:</strong></p>
									<p class="text-l mt-1">{carData.harness}</p>
								</div>
							)}
						</div>
					</InfoCard>
				</div>

				<!-- Main Content -->
				<div class="flex-1">
					<div class="flex flex-col lg:flex-row lg:gap-4">
						<!-- General Information -->
						<div class="lg:w-2/3">
							<InfoCard label="General Information" client:load>
								<div class="p-6">
									<div set:html={carData.detail_sentence} class="prose max-w-none" />
									{carData.footnotes.length > 0 && (
										<ul class="mt-4 list-disc list-inside space-y-2">
											{carData.footnotes.map(note => (
												<li class="text-sm text-gray-600">{note}</li>
											))}
										</ul>
									)}
								</div>
							</InfoCard>
						</div>

						<!-- Metrics Section -->
						<div class="lg:w-1/3">
							<InfoCard label="Vehicle Metrics" client:load>
								<div class="divide-y divide-gray-200">
									<div class="flex justify-between items-center px-4 py-3 bg-gray-50">
										<span class="text-sm font-medium">Curb Weight</span>
										<span class="text-sm">{Math.round(carData.mass_curb_weight).toLocaleString()} kg</span>
									</div>
									<div class="flex justify-between items-center px-4 py-3">
										<span class="text-sm font-medium">Wheelbase</span>
										<span class="text-sm">~{Number(carData.wheelbase).toFixed(2)} m</span>
									</div>
									<div class="flex justify-between items-center px-4 py-3 bg-gray-50">
										<span class="text-sm font-medium">Steer Ratio</span>
										<span class="text-sm">~{Number(carData.steer_ratio).toFixed(2)}</span>
									</div>
									<div class="flex justify-between items-center px-4 py-3">
										<span class="text-sm font-medium">Center to Front Ratio</span>
										<span class="text-sm">~{Number(carData.center_to_front_ratio).toFixed(2)}</span>
									</div>
									<div class="flex justify-between items-center px-4 py-3 bg-gray-50">
										<span class="text-sm font-medium">Max Lateral Accel</span>
										<span class="text-sm">~{Number(carData.max_lateral_accel).toFixed(2)} m/s²</span>
									</div>
								</div>
							</InfoCard>
						</div>
					</div>

					<!-- Required Parts -->
					{carData.parts && carData.parts.length > 0 && (
						<InfoCard label="Required Parts" defaultExpanded={false} client:load>
							<div class="p-6">
								{/* Parts table */}
								{carData.parts && carData.parts.length > 0 && (
									<div>
										<div class="overflow-x-auto">
											<table class="min-w-full divide-y divide-gray-200">
												<thead class="bg-gray-50">
													<tr>
														<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Qty</th>
														<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Part Name</th>
														<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Included with Harness</th>
														<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Included with comma 3X</th>
													</tr>
												</thead>
												<tbody class="bg-white divide-y divide-gray-200">
													{carData.parts
														.sort((a: any, b: any) => {
															const partsSortOrder = ['device', 'connector', 'mount', 'accessory', 'cable'];
															const partsSortComparison = partsSortOrder.indexOf(a.type) - partsSortOrder.indexOf(b.type);
															return partsSortComparison !== 0 ? partsSortComparison : a.name.localeCompare(b.name);
														})
														.map((part: any, index: any) => {
															const isIncludedWithComma3X = 
																part.type === 'device' ||
																(part.type === 'mount' && !part.name.includes('angled')) ||
																(part.type === 'cable' && part.name.includes('right angle OBD-C'));
															const isIncludedWithHarness = !isIncludedWithComma3X;
															
															return (
																<tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
																	<td class="px-6 py-4 whitespace-nowrap text-sm">{part.count}</td>
																	<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">{part.name}</td>
																	<td class="px-6 py-4 whitespace-nowrap text-sm text-center">
																		{isIncludedWithHarness ? 
																			<span class="text-green-600 text-xl font-bold">✓</span> : 
																			<span class="text-gray-400">—</span>}
																	</td>
																	<td class="px-6 py-4 whitespace-nowrap text-sm text-center">
																		{isIncludedWithComma3X ? 
																			<span class="text-green-600 text-xl font-bold">✓</span> : 
																			<span class="text-gray-400">—</span>}
																	</td>
																</tr>
															);
														})
													}
												</tbody>
											</table>
										</div>
									</div>
								)}
							</div>
						</InfoCard>
					)}

					<!-- Technical Parameters -->
					<InfoCard label="Technical Parameters" client:load>
						<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 px-5 py-8">
							<div class="border bg-white flex flex-col">
								<h3 class="text-sm font-medium px-3 py-3 uppercase">Tire Configuration:</h3>
								<div class="flex-1 flex flex-col">
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Stiffness Factor</span>
										<span class="text-sm">~{Number(carData.tire_stiffness_factor).toFixed(2)}</span>
									</div>
									<div class="flex justify-between flex-1 items-center px-3 py-5">
										<span class="text-sm">Front Stiffness</span>
										<span class="text-sm">~{Math.round(carData.tire_stiffness_front).toLocaleString()}</span>
									</div>
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Rear Stiffness</span>
										<span class="text-sm">~{Math.round(carData.tire_stiffness_rear).toLocaleString()}</span>
									</div>
								</div>
							</div>
							<div class="border bg-white flex flex-col">
								<h3 class="text-sm font-medium px-3 py-3 uppercase">Vehicle Control:</h3>
								<div class="flex-1 flex flex-col">
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Actuator Delay</span>
										<span class="text-sm">~{Number(carData.steer_actuator_delay).toFixed(2)}s</span>
									</div>
									<div class="flex justify-between flex-1 items-center px-3 py-5">
										<span class="text-sm">Limit Timer</span>
										<span class="text-sm">~{Number(carData.steer_limit_timer).toFixed(2)}s</span>
									</div>
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Control Type</span>
										<span class="text-sm">{carData.steer_control_type}</span>
									</div>
								</div>
							</div>
							<div class="border bg-white flex flex-col">
								<h3 class="text-sm font-medium px-3 py-3 uppercase">Speed Parameters:</h3>
								<div class="flex-1 flex flex-col">
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Stopping Speed</span>
										<span class="text-sm">~{Number(carData.vEgo_stopping).toFixed(2)} m/s</span>
									</div>
									<div class="flex justify-between flex-1 items-center px-3 py-5">
										<span class="text-sm">Starting Speed</span>
										<span class="text-sm">~{Number(carData.vEgo_starting).toFixed(2)} m/s</span>
									</div>
									<div class="flex justify-between bg-gray-50 flex-1 items-center px-3 py-5">
										<span class="text-sm">Stop Accel</span>
										<span class="text-sm">~{Number(carData.stop_accel).toFixed(2)} m/s²</span>
									</div>
								</div>
							</div>
						</div>
					</InfoCard>

					<!-- System Configuration -->
					<InfoCard label="System Configuration" client:load>
						<div class="p-6">
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								<div>
									<h3 class="text-sm font-medium mb-3 uppercase">Network Settings:</h3>
									<div class="space-y-3">
										<div class="flex items-center justify-between bg-gray-50 p-3">
											<span class="text-sm">Network Location</span>
											<span class="text-sm font-mono">{carData.network_location}</span>
										</div>
										<div class="bg-gray-50 p-3">
											<span class="text-sm block mb-1">Bus Lookup</span>
											{Object.keys(carData.bus_lookup).length > 0 && (
												<div class="text-sm">
													{Object.entries(carData.bus_lookup).map(([key, value]) => (
														<div class="break-all"><span class="font-medium">{key}:</span> {value}</div>
													))}
												</div>
											)}
										</div>
									</div>
								</div>
								<div>
									<h3 class="text-sm font-medium mb-3 uppercase">Feature Flags:</h3>
									<div class="space-y-3">
										<div class="flex items-center justify-between p-3 border">
											<span class="text-sm">Experimental Longitudinal</span>
											<span class="text-sm">{carData.experimental_longitudinal_available ? "Enabled" : "Disabled"}</span>
										</div>
										<div class="flex items-center justify-between bg-gray-50 p-3">
											<span class="text-sm">DSU Enabled</span>
											<span class="text-sm">{carData.enable_dsu ? "Yes" : "No"}</span>
										</div>
										<div class="flex items-center justify-between p-3 border">
											<span class="text-sm">BSM Enabled</span>
											<span class="text-sm">{carData.enable_bsm ? "Yes" : "No"}</span>
										</div>
										<div class="flex items-center justify-between bg-gray-50 p-3">
											<span class="text-sm">PCM Cruise</span>
											<span class="text-sm">{carData.pcm_cruise ? "Yes" : "No"}</span>
										</div>
									</div>
								</div>
							</div>
						</div>
					</InfoCard>

					<!-- Capabilities -->
					<InfoCard label="Capabilities" client:load>
						<div class="divide-y divide-gray-200">
							<div class="flex justify-between items-center px-6 py-4 bg-gray-50">
								<span class="font-medium">Minimum Steering Speed</span>
								<span>{parseFloat(Number(carData.min_steer_speed).toFixed(1))} mph</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4">
								<span class="font-medium">FSR Longitudinal Control</span>
								<span>{carData.fsr_longitudinal}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4 bg-gray-50">
								<span class="font-medium">FSR Steering Control</span>
								<span>{carData.fsr_steering}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4">
								<span class="font-medium">Longitudinal Control Type</span>
								<span>{carData.longitudinal}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4 bg-gray-50">
								<span class="font-medium">Support Type</span>
								<span>{carData.support_type}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4">
								<span class="font-medium">Required Package</span>
								<span>{carData.package}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4 bg-gray-50">
								<span class="font-medium">Auto Resume</span>
								<span>{carData.auto_resume ? "Yes" : "No"}</span>
							</div>
							<div class="flex justify-between items-center px-6 py-4">
								<span class="font-medium">Steering Torque</span>
								<span>{carData.steering_torque}</span>
							</div>
						</div>
					</InfoCard>

					<!-- Car Notes -->
					<InfoCard label="Car Notes" defaultExpanded={false} client:load>
						<div class="p-6">
							<div class="border border-black bg-white p-8 text-center">
								<div class="text-gray-500 mb-2">
									<svg class="w-12 h-12 mx-auto mb-4" fill="currentColor" viewBox="0 0 24 24">
										<path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
									</svg>
								</div>
								<h3 class="text-lg font-medium text-gray-700 mb-2">Coming Soon</h3>
								<p class="text-sm text-gray-500">Car notes and insights will be available here.</p>
							</div>
						</div>
					</InfoCard>

					<!-- Tutorials -->
					<InfoCard label="Tutorials" defaultExpanded={false} client:load>
						<div class="p-6">
							<div class="border border-black bg-white p-8 text-center">
								<div class="text-gray-500 mb-2">
									<svg class="w-12 h-12 mx-auto mb-4" fill="currentColor" viewBox="0 0 24 24">
										<path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
									</svg>
								</div>
								<h3 class="text-lg font-medium text-gray-700 mb-2">Coming Soon</h3>
								<p class="text-sm text-gray-500">Install tips and tricks will be available here.</p>
							</div>
						</div>
					</InfoCard>
				</div>
			</div>
		</div>
	</main>
</BaseLayout> 