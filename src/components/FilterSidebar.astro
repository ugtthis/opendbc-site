---
const filterSections = [
  { title: 'Support Level', options: [] },
  { title: 'Transmission', options: [] },
  { title: 'Make', options: [] },
  { title: 'Model', options: [] },
  { title: 'Year', options: [] },
  { title: 'Car Type', options: [] },
  { title: 'Drive Train', options: [] },
];
---

<div 
  id="sidebar" 
  class="fixed left-0 top-[99px] h-[calc(100vh-99px)] bg-[#FBFBFB] shadow-m shadow-gray-400 w-full md:w-[380px] p-9 border-r-4 border-white transform -translate-x-full z-50 overflow-y-auto"
>
  <button
    id="closeSidebar"
    class="lg:hidden absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
  <div class="mb-6">
    <h2 class="text-lg font-semibold mb-4">SORT BY:</h2>
    <div class="flex gap-2">
      <div class="relative w-1/2">
        <select class="appearance-none border border-black p-4 w-full pr-10">
          <option>Make</option>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>
      <div class="relative w-1/2">
        <select class="appearance-none border border-black p-4 w-full pr-10">
          <option>ASC</option>
          <option>DESC</option>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>
    </div>
  </div>

  <div class="w-full h-[1px] bg-gray-200 my-4" />

  <div>
    <h2 class="text-lg font-semibold mb-4">FILTER BY:</h2>
    <div class="space-y-3">
      {filterSections.map((section) => (
        <div>
          <button class="w-full flex items-center justify-between border border-black p-4 hover:bg-gray-50">
            <span>{section.title}</span>
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const closeButton = document.getElementById('closeSidebar');
    const sidebar = document.getElementById('sidebar');
    const mediaQuery = window.matchMedia('(min-width: 1024px)');
    
    // Handle close button click
    const closeSidebar = () => {
      if (!mediaQuery.matches) {
        sidebar?.classList.add('-translate-x-full');
      }
    };

    // Handle media query changes
    const handleMediaQuery = (e: MediaQueryListEvent | MediaQueryList) => {
      if (e.matches) {
        sidebar?.classList.remove('-translate-x-full');
      } else {
        sidebar?.classList.add('-translate-x-full');
      }
    };

    // Handle touch events for swipe to close on mobile
    let touchStartX = 0;
    let touchEndX = 0;

    const handleTouchStart = (e: TouchEvent) => {
      if (mediaQuery.matches) return;
      touchStartX = e.touches[0].clientX;
    };

    const handleTouchMove = (e: TouchEvent) => {
      if (mediaQuery.matches) return;
      touchEndX = e.touches[0].clientX;
    };

    const handleTouchEnd = () => {
      if (mediaQuery.matches) return;
      const swipeThreshold = 100;
      const swipeDistance = touchStartX - touchEndX;
      
      if (swipeDistance > swipeThreshold) {
        closeSidebar();
      }
    };

    // Add event listeners
    closeButton?.addEventListener('click', closeSidebar);
    mediaQuery.addEventListener('change', handleMediaQuery);
    
    // Add touch events for mobile swipe
    sidebar?.addEventListener('touchstart', handleTouchStart);
    sidebar?.addEventListener('touchmove', handleTouchMove);
    sidebar?.addEventListener('touchend', handleTouchEnd);

    // Handle escape key to close sidebar on mobile
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !mediaQuery.matches) {
        closeSidebar();
      }
    });

    // Initial check
    handleMediaQuery(mediaQuery);
  });
</script> 